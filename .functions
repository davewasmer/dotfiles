# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Watch the node module / project in the current directory for changes. When a
# change is detected in the src/ or lib/ directories, execute `npm run build`
function watch-project {
  local pkg_name=$(jq '.name' < package.json | tr -d '"')
  watchman -j << EOT
    ["trigger", "$(pwd)", {
      "name": "$pkg_name",
      "append_files": false,
      "stderr": ">build.log",
      "expression": [ "anyof",
        [ "match", "lib/**/*.js", "wholename" ],
        [ "match", "src/**/*.js", "wholename" ]
      ],
      "command": [ "npm", "run", "build" ]
    }]
EOT
  echo "Now watching $(pwd). When any src/ or lib/ file changes, 'npm run build' will be executed in the background";
}

# Stop watching a the current directory for changes
function unwatch-project {
  local pkg_name=$(jq '.name' < package.json | tr -d '"')
  watchman -- trigger-del $(pwd) $pkg_name
  watchman -- trigger-del $(pwd) $pkg_name-docs
  echo "Deleted watcher for $(pwd). Automatic background builds removed."
}

# Start a Docker Compose service in detached mode, but immediately tail the logs
# This lets you start the container and watch the startup logs, but quitting
# the log tail won't stop the container.
function dup {
  local current_dir=$(basename $PWD)
  local service_name=${1:-$current_dir}
  docker-compose up -d $service_name
  docker-compose logs -tf --tail 200 $service_name
}

function dcr {
  local service_name=$(basename $PWD)
  docker-compose run --rm $service_name "$@"
}

# Cleanup Docker disk space
function docker-clean-disk {
  docker ps -qa | xargs docker stop
  docker ps -qa | xargs docker rm
  docker images -q --filter "dangling=true" | xargs -n 100 docker rmi
}

# Clear the logs for a given container
function docker-clear-logs {
  local log_path=$(docker inspect $1 | grep -G '"LogPath": "*"' | sed -e 's/.*"LogPath": "//g' | sed -e 's/",//g');
  docker-machine ssh default sudo rm $log_path
}

